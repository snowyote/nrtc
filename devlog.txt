========== 2012-12-19 ========== realtime chess =========== 10:50:48 ===========

My current problem is that I'm worn out from a few previous positions
I've held and coding doesn't light me up like it used to.  Although,
to be fair, I've never really been good about coding on my own time,
for my own projects - I may write small scripts now and then to
scratch particular itches (usually solvers for super annoying
minigames), but never polished projects, which means my skill
development only happens for 'work stuff'.  And, since I'm a fairly
reliable and noncomplaining guy, I end being saddled with legacy stuff
(although I've been lucky enough to have a few green-field projects
here and there).  So if I want to learn things, especially new tech, I
have to do it myself.

I'd like to learn Node.js and socket.io, because those let you do cool
things with webpages that were previously kind of cumbersome.  I am a
pretty much total stranger to web development, though I've done
backend web service development in Rails.  I understand Javascript and
have worked with CoffeeScript and jQuery, though the vast majority of
my professional background is in C/C++ game development.  So, this
would be new and fun for me!

I recently saw a video of "Kung Fu Chess", which is a variant of chess
in which there aren't turns.  You can move any piece at any time
(modulo a cooldown).  It looked fascinating and fun and it seemed like
a straightforward thing to up-and-clone (maybe I'll modify the rules
later, but it seems like a good basic starting point for a game).

So, what do I start with?

First things first, I'm going to need a 'playable' single-player local
javascript version of chess.  Once that's done, I can worry about
hooking up the moves to socket.io events, and once that's done I can
worry about allocating games / keeping track of persistent scores /
all that metagamey crap.  But first I need a board, and I need to be
able to move pieces around on it.

well, first I need a git repo.  So, here we go!

bash-3.2$ pwd
/Users/ben
bash-3.2$ git init nrtc
Initialized empty Git repository in /Users/ben/nrtc/.git/
bash-3.2$ cd nrtc
bash-3.2$ git add -A devlog.txt 
bash-3.2$ git commit -m 'initial commit'
[master (root-commit) REDACTED] initial commit
 1 file changed, 44 insertions(+)
 create mode 100644 devlog.txt
bash-3.2$ 

Yeah, I guess I don't need to be that verbose.  Step one!  Complete!

=========== 2012-12-19 =========== framework ============ 11:06:28 =============

So to prototype the game board and pieces, I'm going to make a little
skeletal html page that contains nothing but the board, sets up the
initial piece layout, and lets me move them around.  I'm going to use
CoffeeScript for this, because I like the language and I want to gain
more fluency with it.  I know that in the node project, there is some
kinda thing you can do so that .coffee will be automatically compiled
to .js and cached and cool things like that, but that's yak-shaving at
this point.  I don't need performance right now, and I certainly don't
need to set up a node project, so let's just make a little HTML file
that pulls CoffeeScript from a CDN (gotta be out there somewhere,
right?) so that I can use script type text/coffee directly in html.

Ooh, thanks CDNJS!

=========== 2012-12-19 ============ modeling ============ 11:16:47 =============

Frankly, I don't really understand the object model for CoffeeScript,
but I'm going to outline what I think the rough object model should
be, keeping in mind that the game logic should be at least somewhat
decoupled from the display logic, given that the simulation is at some
point going to be running on a 'headless' (DOMless really) Node.js
server.  We've got a Game (a coordinator object), a Board, sixty-four
Cells, and what like thirty-two Pieces.  Hmm.. is now a good time to
try that CRC stuff I read about?
http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card

It might not be a bad idea, especially since my initial pass totally
failed to separate display from logic ;P

Game
Root of the simulation, observes victory conditions
Player, Board

Player
An object that issues moves, can win or lose
Game, Board, Piece

Board
contains Piece positions, applies moves
Piece, Cell, Move

Location
a two dimensional vector that a Piece can be at
*

Cell
an integral Location that a non-moving in-play Piece can be at
Piece

Piece
a game piece, owned by a Player, that can move, has a Cooldown
Player

Cooldown
a timer that determines when a Piece can move again.
*

Move
a record-type. pair of Cells, indicates a Move a Piece might make
Piece, Board (to check for validity)

DisplayGame
observes Game, alerts when you win/lose
Game, DOM

DisplayBoard
observes the Board, which doesn't change much
Board, DOM

DisplayPiece
observes a Piece, animates between cells
Piece, DOM

allright, that's a first pass.  Couple issues though:

* As someone with game development experience, I know latency is going
  to mess stuff up for real-time play.  I'd like to get a GGPO-style
  simulation system in here, and this isn't on the CRC.

* How does a human Player submit Moves to the Game?

for the first one, I'm going to punt for now, just keeping in mind
that I'll probably need to lock framerate and keep a buffer of
simulation states that I can jump back to and resimulate from.  GGPO
is an implementation of an interesting networking model that you can
read more about at GGPO.net.  I'm just going to half-ass it.

For the second one - well, the Player -is- the object that submits
moves.  I will probably derive LocalPlayer and RemotePlayer from
Player, and LocalPlayer will be responsible for coordinating with
DisplayBoard to get clicks and submit moves.

======== 2012-12-19 ======== ok so make some files? ========= 11:42:16 =========

Allright, I know that in node all these modules are hidden from each
other and I don't know how you make modules that span multiple files
but for the moment, I don't really care, I'll change it later.  I also
don't need to google around for coffeescript file-naming conventions
right now either, I'll just use the lowercase version of the
classname.  (Keeping a running diary is awesome for preventing
yak-shaving, by the way, it becomes really obvious when I'm going down
a rathole and I become embarassed to.  Perhaps I should do this ALL
THE TIME?)

So!  Let's make a bunch of files for all the classes and start filling
'em out.

========== 2012-12-19 ========== oh crap tests =========== 11:47:18 ============

Yeah, I always forget this... tests are important.  It's easy to
dismiss this as yak-shaving but there really isn't an excuse for not
being a grownup here.  I remember hearing something about mocha, which
is a testing framework for javascript, so it's time to google that up
and do a little reading.  This will probably influence how my project
is set up, so I'll do a commit now and then unwind my stuff a bit.


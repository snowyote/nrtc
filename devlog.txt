========== 2012-12-19 ========== realtime chess =========== 10:50:48 ===========

My current problem is that I'm worn out from a few previous positions
I've held and coding doesn't light me up like it used to.  Although,
to be fair, I've never really been good about coding on my own time,
for my own projects - I may write small scripts now and then to
scratch particular itches (usually solvers for super annoying
minigames), but never polished projects, which means my skill
development only happens for 'work stuff'.  And, since I'm a fairly
reliable and noncomplaining guy, I end being saddled with legacy stuff
(although I've been lucky enough to have a few green-field projects
here and there).  So if I want to learn things, especially new tech, I
have to do it myself.

I'd like to learn Node.js and socket.io, because those let you do cool
things with webpages that were previously kind of cumbersome.  I am a
pretty much total stranger to web development, though I've done
backend web service development in Rails.  I understand Javascript and
have worked with CoffeeScript and jQuery, though the vast majority of
my professional background is in C/C++ game development.  So, this
would be new and fun for me!

I recently saw a video of "Kung Fu Chess", which is a variant of chess
in which there aren't turns.  You can move any piece at any time
(modulo a cooldown).  It looked fascinating and fun and it seemed like
a straightforward thing to up-and-clone (maybe I'll modify the rules
later, but it seems like a good basic starting point for a game).

So, what do I start with?

First things first, I'm going to need a 'playable' single-player local
javascript version of chess.  Once that's done, I can worry about
hooking up the moves to socket.io events, and once that's done I can
worry about allocating games / keeping track of persistent scores /
all that metagamey crap.  But first I need a board, and I need to be
able to move pieces around on it.

well, first I need a git repo.  So, here we go!

bash-3.2$ pwd
/Users/ben
bash-3.2$ git init nrtc
Initialized empty Git repository in /Users/ben/nrtc/.git/
bash-3.2$ cd nrtc
bash-3.2$ git add -A devlog.txt 
bash-3.2$ git commit -m 'initial commit'
[master (root-commit) REDACTED] initial commit
 1 file changed, 44 insertions(+)
 create mode 100644 devlog.txt
bash-3.2$ 

Yeah, I guess I don't need to be that verbose.  Step one!  Complete!

=========== 2012-12-19 =========== framework ============ 11:06:28 =============

So to prototype the game board and pieces, I'm going to make a little
skeletal html page that contains nothing but the board, sets up the
initial piece layout, and lets me move them around.  I'm going to use
CoffeeScript for this, because I like the language and I want to gain
more fluency with it.  I know that in the node project, there is some
kinda thing you can do so that .coffee will be automatically compiled
to .js and cached and cool things like that, but that's yak-shaving at
this point.  I don't need performance right now, and I certainly don't
need to set up a node project, so let's just make a little HTML file
that pulls CoffeeScript from a CDN (gotta be out there somewhere,
right?) so that I can use script type text/coffee directly in html.

Ooh, thanks CDNJS!

=========== 2012-12-19 ============ modeling ============ 11:16:47 =============

Frankly, I don't really understand the object model for CoffeeScript,
but I'm going to outline what I think the rough object model should
be, keeping in mind that the game logic should be at least somewhat
decoupled from the display logic, given that the simulation is at some
point going to be running on a 'headless' (DOMless really) Node.js
server.  We've got a Game (a coordinator object), a Board, sixty-four
Cells, and what like thirty-two Pieces.  Hmm.. is now a good time to
try that CRC stuff I read about?
http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card

It might not be a bad idea, especially since my initial pass totally
failed to separate display from logic ;P

Game - lib/game.coffee, test/game_test.coffee
Root of the simulation, observes victory conditions
Player, Board

Player - lib/player.coffee, test/player_test.coffee
An object that issues moves, can win or lose
Game, Board, Piece

Board - lib/board.coffee, test/board_test.coffee
contains Piece positions, applies moves
Piece, Cell, Move

Location - lib/location.coffee, test/location_test.coffee
a two dimensional vector that a Piece can be at
*

Cell - lib/cell.coffee, test/cell_test.coffee
an integral Location that a non-moving in-play Piece can be at
Piece

Piece - lib/piece.coffee, test/piece_test.coffee
a game piece, owned by a Player, that can move, has a Cooldown
Player

Cooldown - lib/cooldown.coffee, test/cooldown_test.coffee
a timer that determines when a Piece can move again.
*

Move - lib/move.coffee, test/move_test.coffee
a record-type. pair of Cells, indicates a Move a Piece might make
Piece, Board (to check for validity)

DisplayGame - lib/displaygame.coffee, test/displaygame_test.coffee
observes Game, alerts when you win/lose
Game, DOM

DisplayBoard - lib/displayboard.coffee, test/displayboard_test.coffee
observes the Board, which doesn't change much
Board, DOM

DisplayPiece - lib/displaypiece.coffee, test/displaypiece_test.coffee
observes a Piece, animates between cells
Piece, DOM

allright, that's a first pass.  Couple issues though:

* As someone with game development experience, I know latency is going
  to mess stuff up for real-time play.  I'd like to get a GGPO-style
  simulation system in here, and this isn't on the CRC.

for the first one, I'm going to punt for now, just keeping in mind
that I'll probably need to lock framerate and keep a buffer of
simulation states that I can jump back to and resimulate from.  GGPO
is an implementation of an interesting networking model that you can
read more about at GGPO.net.  I'm just going to half-ass it.

* How does a human Player submit Moves to the Game?

For the second one - well, the Player -is- the object that submits
moves.  I will probably derive LocalPlayer and RemotePlayer from
Player, and LocalPlayer will be responsible for coordinating with
DisplayBoard to get clicks and submit moves.

======== 2012-12-19 ======== ok so make some files? ========= 11:42:16 =========

Allright, I know that in node all these modules are hidden from each
other and I don't know how you make modules that span multiple files
but for the moment, I don't really care, I'll change it later.  I also
don't need to google around for coffeescript file-naming conventions
right now either, I'll just use the lowercase version of the
classname.  (Keeping a running diary is awesome for preventing
yak-shaving, by the way, it becomes really obvious when I'm going down
a rathole and I become embarassed to.  Perhaps I should do this ALL
THE TIME?)

So!  Let's make a bunch of files for all the classes and start filling
'em out.

========== 2012-12-19 ========== oh crap tests =========== 11:47:18 ============

Yeah, I always forget this... tests are important.  It's easy to
dismiss this as yak-shaving but there really isn't an excuse for not
being a grownup here.  I remember hearing something about mocha, which
is a testing framework for javascript, so it's time to google that up
and do a little reading.  This will probably influence how my project
is set up, so I'll do a commit now and then unwind my stuff a bit.

======= 2012-12-19 ======= allright, time to grow up ======== 11:53:27 =========

Well, mocha runs on node, so it's time to set up a node project and
actually require coffee-script and mocha like a grownup.

Although, do I want to use jasmine-given instead?  Pivotal know what
they're doing, and it would be nice to build familiarity with Jasmine
so that I can write front-end tests in it as well..  I'll make this
decision after I walk the dog!  *curtain*

======= 2012-12-26 ======== or go home for christmas ======== 15:09:48 =========

Stuck in the airport.  I guess I'm gonna go with mocha because I have
no internet, and that's what I've got installed in node_modules right
now.  Start with a fresh slate, stub classes are junk.

========== 2013-01-01 ========== happy new year =========== 10:08:42 ===========

I have to get into the habit of at least working on this every day,
even if I don't make spectacular progress.  Disruptions are gone, at
least.  Let's take a look at mocha.

In lieu of 'bundle exec bash', I can at least go to the project dir
and do:

bash-3.2$ export PATH=$(PWD)/node_modules/.bin:$PATH
bash-3.2$ which mocha
/Users/ben/nrtc/node_modules/.bin/mocha

Well, right off the bat, I learn I can't test coffeescript.  Maybe I
should write test/test.js to glob all the coffee and load/run it.

I'll go by this:
http://danneu.com/posts/14-setting-up-mocha-testing-with-coffeescript-node-js-and-a-cakefile

and also this:
http://net.tutsplus.com/tutorials/javascript-ajax/better-coffeescript-testing-with-mocha/

============ 2013-01-01 ============= hrm ============== 10:44:24 ==============

Starting to gain a little fluency with mocha and chai, in that I can do

    "something".should.equal "something"
    "something".should.not.equal "something else"

but the stub class I've defined for Board doesn't seem to work like I
expect.  I'll try to find out if it's a problem with my require or
something else.

Okay, if I define the class directly in the test file, it works.
There's a problem somewhere between my export from board.coffee and my
require.  Right now I've got

  # lib/board.coffee
  exports = class Board
  
  # test/board_test.coffee
  Board = require '../lib/board'

and then Board appears to be {} inside board_test.coffee.  Time to
look at some other coffeescript projects to see how they export
classes?

...

embarassingly enough, I wanted module.exports, not bare exports.

========= 2013-01-01 ========= well allright then ========== 10:53:58 ==========

So, what should I start with?  Let's look at the CRC
again... actually, since I am probably going to change that and I want
the log to stay 'the log', let's export it to its own file.

Location seems easy enough to start with.  Let's make a test for it.

Oof, ack, I'm an idiot.  I started writing tests for Cell.  Hold that
for now.

Okay, I've got some tests for Location but I probably have expect
syntax wrong:

describe 'Location', ->
  it 'should not construct without 2 args', ->
    expect(-> new Location).to.raise_error
  it 'should construct with 2 args', ->
    expect(-> new Location(0,0)).not.to.raise_error
  describe 'instance', ->
    var instance
    beforeEach -> instance = new Location(1,2)
    it 'should return its x-coordinate on .x'
      instance.x.should.equal 1
    it 'should return its y-coordinate on .y'
      instance.y.should.equal 2

Funny note: I just tried to take the java jacket off of an empty
coffee cup, and it popped out of my hands and across a divider and
bounced off a dude's head.  Hooray for continuing to be an awkward
fuckup into 2013 and beyond!

Allright, I can't 'var instance' so maybe 'instance = null'?  Hmm, I
can't tell if it's using the same 'instance' inside beforeEach and it,
though.  How do I compile coffeescript to see the js output again...

coffee -p test/location_test.coffee

Well, I'm getting a 'var instance' okay.  BTW, I'm looking at
https://github.com/visionmedia/express/blob/master/test/Router.js
for inspiration.

Allright, I get a test failure because x and y are undefined.  I
should actually write location.coffee now.

And .. hey, wow, this actually worked.  Cool!  Yay!  Glug

========= 2013-01-01 ========= Okay, now for Cell ========== 11:41:51 ==========

How's this look?

Cell = require '../lib/cell'

describe 'Cell', ->
  it 'should fail to construct without a Location'
  it 'should construct with a Location'
  describe '(unwired)', ->
    it 'should not be valid'
    it 'should wire with four arguments'
  describe '(wired)', ->
    it 'should be valid'
    it 'should take them in NEWS order'
    it 'should return its neighbors'
  describe '(border)', ->
    it 'should accept null for a neighbor'
    it 'should return an invalid cell for a null neighbor'

Looks good.  Okay, and it's working, although I don't understand how
to do class constants in coffeescript, but hiding the constant
(INVALID) is probably better anyhow.

=========== 2013-01-01 =========== well okay ============ 12:09:07 =============

Looking at my CRC it looks like I left Piece out of Cell.  Who is
responsible for
* keeping track of what pieces are where? Cell
* validating moves? Board
* capturing pieces out of play? Game

How should I get from a Piece to its Cell so I can validate moves?
Well, Board validates moves, it has the Cells, so that's okay.

Oop, INVALID should be chainable as well, let's add a test for that.

Allright, let's add piece.

============ 2013-01-01 ============= now ============== 12:22:56 ==============

Piece.  It should have a Location (nullable when out of play?) and
should generate moves from a Cell.

Ugh, I gotta update scruffy-jump to work on node projects instead of
rails projects.  Maybe make scruffy-jump-matchers a project variable.

Also, I just remembered I have to handle promotion, which is going to
add more classes.  I need a TODO list.  But I don't want to yakshave
right now ;( I'll look into org-mode todo shit when I run out of
brain.

Interesting: a queen can't move through another piece.  But in RTC, if
you start the move, what happens if it becomes invalid partway through
the move?  I guess it should still be valid.  But then what happens if
I move two pieces of the same color onto the same cell, can you
capture your own piece?  WHY NOT!!!!  cool bro

I also want to add a test watcher that does a cls() and reruns the
test when you update test/* or lib/*.

Bleh, stuck at 'moves'.  I should implement these before Piece.

============ 2013-01-03 ============= hmm ============== 09:10:56 ==============

I'm getting 'ReferenceError: Move is not defined'.  ah, I see, not in
the test, in piece.coffee.

Well, okay, cool, now Pieces work.  But I'm getting the feeling I'm
building this a little too bottom-up.

============ 2013-01-07 ============= okay ============= 08:38:40 ==============

I'm here to agree with myself that I'm building this too bottom-up,
and that TDD, while it's probably a super cool thing whne you're
practiced in it, is not my style and I'm having a hard time getting
velocity.  Part of this is because my class design skills are also not
super hot (I guess?), I usually don't make a big chart ahead of time
saying this hooks to that and nothing else, I just start threading
functionality through stuff.  So I think I have a legit skeleton right
now and I can start building stuff with it, and I'll just have to try
to be grownup and pay attention when something is becoming malignant
and then try to break it up.

I made a little observer class because I -do- want the game objects to
not have to know about the Display* objects at all, so that's nice.

So, let's consult the CRC and get to the point where we can have
pieces moving around on the board and stuff.

============ 2013-01-14 ============= lame ============= 09:12:24 ==============

A week wasted later... okay, where was I again?

Okay let's at least make all the pieces and generate their moves.

=========== 2013-01-14 ============ not bad ============= 09:50:21 =============

I've encoded all the moves, now I should write tests for them.

============ 2013-01-14 ============ or not ============= 11:48:37 =============

I'll figure out whether the moves work easier if I get some visual
feedback.  Now I need to figure out how to get this stuff all running
in an html page.

Looking at
http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/

Ugh.

Ooh, waitaminute:
https://github.com/substack/node-browserify

Okay, using browserify, I've got -something-, let's see if it works.

Well, it doesn't really, I need to export shit to get it to work, or
write stuff in entry.js.  Let's checkpoint though.

Okay actually I got it working, nice!  I forgot how to use the script
tag because I'm a javascript professional.  Now to work on display
stuff.

============ 2013-01-17 ============ pieces ============= 09:48:25 =============

Using unicode chara from
http://en.wikipedia.org/wiki/Chess_symbols_in_Unicode

Actually, using their images, because the alpha is no good

allright, they drawin!


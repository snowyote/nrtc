========== 2012-12-19 ========== realtime chess =========== 10:50:48 ===========

My current problem is that I'm worn out from a few previous positions
I've held and coding doesn't light me up like it used to.  Although,
to be fair, I've never really been good about coding on my own time,
for my own projects - I may write small scripts now and then to
scratch particular itches (usually solvers for super annoying
minigames), but never polished projects, which means my skill
development only happens for 'work stuff'.  And, since I'm a fairly
reliable and noncomplaining guy, I end being saddled with legacy stuff
(although I've been lucky enough to have a few green-field projects
here and there).  So if I want to learn things, especially new tech, I
have to do it myself.

I'd like to learn Node.js and socket.io, because those let you do cool
things with webpages that were previously kind of cumbersome.  I am a
pretty much total stranger to web development, though I've done
backend web service development in Rails.  I understand Javascript and
have worked with CoffeeScript and jQuery, though the vast majority of
my professional background is in C/C++ game development.  So, this
would be new and fun for me!

I recently saw a video of "Kung Fu Chess", which is a variant of chess
in which there aren't turns.  You can move any piece at any time
(modulo a cooldown).  It looked fascinating and fun and it seemed like
a straightforward thing to up-and-clone (maybe I'll modify the rules
later, but it seems like a good basic starting point for a game).

So, what do I start with?

First things first, I'm going to need a 'playable' single-player local
javascript version of chess.  Once that's done, I can worry about
hooking up the moves to socket.io events, and once that's done I can
worry about allocating games / keeping track of persistent scores /
all that metagamey crap.  But first I need a board, and I need to be
able to move pieces around on it.

well, first I need a git repo.  So, here we go!

bash-3.2$ pwd
/Users/ben
bash-3.2$ git init nrtc
Initialized empty Git repository in /Users/ben/nrtc/.git/
bash-3.2$ cd nrtc
bash-3.2$ git add -A devlog.txt
bash-3.2$ git commit -m 'initial commit'
[master (root-commit) REDACTED] initial commit
 1 file changed, 44 insertions(+)
 create mode 100644 devlog.txt
bash-3.2$

Yeah, I guess I don't need to be that verbose.  Step one!  Complete!

=========== 2012-12-19 =========== framework ============ 11:06:28 =============

So to prototype the game board and pieces, I'm going to make a little
skeletal html page that contains nothing but the board, sets up the
initial piece layout, and lets me move them around.  I'm going to use
CoffeeScript for this, because I like the language and I want to gain
more fluency with it.  I know that in the node project, there is some
kinda thing you can do so that .coffee will be automatically compiled
to .js and cached and cool things like that, but that's yak-shaving at
this point.  I don't need performance right now, and I certainly don't
need to set up a node project, so let's just make a little HTML file
that pulls CoffeeScript from a CDN (gotta be out there somewhere,
right?) so that I can use script type text/coffee directly in html.

Ooh, thanks CDNJS!

=========== 2012-12-19 ============ modeling ============ 11:16:47 =============

Frankly, I don't really understand the object model for CoffeeScript,
but I'm going to outline what I think the rough object model should
be, keeping in mind that the game logic should be at least somewhat
decoupled from the display logic, given that the simulation is at some
point going to be running on a 'headless' (DOMless really) Node.js
server.  We've got a Game (a coordinator object), a Board, sixty-four
Cells, and what like thirty-two Pieces.  Hmm.. is now a good time to
try that CRC stuff I read about?
http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card

It might not be a bad idea, especially since my initial pass totally
failed to separate display from logic ;P

Game - lib/game.coffee, test/game_test.coffee
Root of the simulation, observes victory conditions
Player, Board

Player - lib/player.coffee, test/player_test.coffee
An object that issues moves, can win or lose
Game, Board, Piece

Board - lib/board.coffee, test/board_test.coffee
contains Piece positions, applies moves
Piece, Cell, Move

Location - lib/location.coffee, test/location_test.coffee
a two dimensional vector that a Piece can be at
*

Cell - lib/cell.coffee, test/cell_test.coffee
an integral Location that a non-moving in-play Piece can be at
Piece

Piece - lib/piece.coffee, test/piece_test.coffee
a game piece, owned by a Player, that can move, has a Cooldown
Player

Cooldown - lib/cooldown.coffee, test/cooldown_test.coffee
a timer that determines when a Piece can move again.
*

Move - lib/move.coffee, test/move_test.coffee
a record-type. pair of Cells, indicates a Move a Piece might make
Piece, Board (to check for validity)

DisplayGame - lib/displaygame.coffee, test/displaygame_test.coffee
observes Game, alerts when you win/lose
Game, DOM

DisplayBoard - lib/displayboard.coffee, test/displayboard_test.coffee
observes the Board, which doesn't change much
Board, DOM

DisplayPiece - lib/displaypiece.coffee, test/displaypiece_test.coffee
observes a Piece, animates between cells
Piece, DOM

allright, that's a first pass.  Couple issues though:

* As someone with game development experience, I know latency is going
  to mess stuff up for real-time play.  I'd like to get a GGPO-style
  simulation system in here, and this isn't on the CRC.

for the first one, I'm going to punt for now, just keeping in mind
that I'll probably need to lock framerate and keep a buffer of
simulation states that I can jump back to and resimulate from.  GGPO
is an implementation of an interesting networking model that you can
read more about at GGPO.net.  I'm just going to half-ass it.

* How does a human Player submit Moves to the Game?

For the second one - well, the Player -is- the object that submits
moves.  I will probably derive LocalPlayer and RemotePlayer from
Player, and LocalPlayer will be responsible for coordinating with
DisplayBoard to get clicks and submit moves.

======== 2012-12-19 ======== ok so make some files? ========= 11:42:16 =========

Allright, I know that in node all these modules are hidden from each
other and I don't know how you make modules that span multiple files
but for the moment, I don't really care, I'll change it later.  I also
don't need to google around for coffeescript file-naming conventions
right now either, I'll just use the lowercase version of the
classname.  (Keeping a running diary is awesome for preventing
yak-shaving, by the way, it becomes really obvious when I'm going down
a rathole and I become embarassed to.  Perhaps I should do this ALL
THE TIME?)

So!  Let's make a bunch of files for all the classes and start filling
'em out.

========== 2012-12-19 ========== oh crap tests =========== 11:47:18 ============

Yeah, I always forget this... tests are important.  It's easy to
dismiss this as yak-shaving but there really isn't an excuse for not
being a grownup here.  I remember hearing something about mocha, which
is a testing framework for javascript, so it's time to google that up
and do a little reading.  This will probably influence how my project
is set up, so I'll do a commit now and then unwind my stuff a bit.

======= 2012-12-19 ======= allright, time to grow up ======== 11:53:27 =========

Well, mocha runs on node, so it's time to set up a node project and
actually require coffee-script and mocha like a grownup.

Although, do I want to use jasmine-given instead?  Pivotal know what
they're doing, and it would be nice to build familiarity with Jasmine
so that I can write front-end tests in it as well..  I'll make this
decision after I walk the dog!  *curtain*

======= 2012-12-26 ======== or go home for christmas ======== 15:09:48 =========

Stuck in the airport.  I guess I'm gonna go with mocha because I have
no internet, and that's what I've got installed in node_modules right
now.  Start with a fresh slate, stub classes are junk.

========== 2013-01-01 ========== happy new year =========== 10:08:42 ===========

I have to get into the habit of at least working on this every day,
even if I don't make spectacular progress.  Disruptions are gone, at
least.  Let's take a look at mocha.

In lieu of 'bundle exec bash', I can at least go to the project dir
and do:

bash-3.2$ export PATH=$(PWD)/node_modules/.bin:$PATH
bash-3.2$ which mocha
/Users/ben/nrtc/node_modules/.bin/mocha

Well, right off the bat, I learn I can't test coffeescript.  Maybe I
should write test/test.js to glob all the coffee and load/run it.

I'll go by this:
http://danneu.com/posts/14-setting-up-mocha-testing-with-coffeescript-node-js-and-a-cakefile

and also this:
http://net.tutsplus.com/tutorials/javascript-ajax/better-coffeescript-testing-with-mocha/

============ 2013-01-01 ============= hrm ============== 10:44:24 ==============

Starting to gain a little fluency with mocha and chai, in that I can do

    "something".should.equal "something"
    "something".should.not.equal "something else"

but the stub class I've defined for Board doesn't seem to work like I
expect.  I'll try to find out if it's a problem with my require or
something else.

Okay, if I define the class directly in the test file, it works.
There's a problem somewhere between my export from board.coffee and my
require.  Right now I've got

  # lib/board.coffee
  exports = class Board

  # test/board_test.coffee
  Board = require '../lib/board'

and then Board appears to be {} inside board_test.coffee.  Time to
look at some other coffeescript projects to see how they export
classes?

...

embarassingly enough, I wanted module.exports, not bare exports.

========= 2013-01-01 ========= well allright then ========== 10:53:58 ==========

So, what should I start with?  Let's look at the CRC
again... actually, since I am probably going to change that and I want
the log to stay 'the log', let's export it to its own file.

Location seems easy enough to start with.  Let's make a test for it.

Oof, ack, I'm an idiot.  I started writing tests for Cell.  Hold that
for now.

Okay, I've got some tests for Location but I probably have expect
syntax wrong:

describe 'Location', ->
  it 'should not construct without 2 args', ->
    expect(-> new Location).to.raise_error
  it 'should construct with 2 args', ->
    expect(-> new Location(0,0)).not.to.raise_error
  describe 'instance', ->
    var instance
    beforeEach -> instance = new Location(1,2)
    it 'should return its x-coordinate on .x'
      instance.x.should.equal 1
    it 'should return its y-coordinate on .y'
      instance.y.should.equal 2

Funny note: I just tried to take the java jacket off of an empty
coffee cup, and it popped out of my hands and across a divider and
bounced off a dude's head.  Hooray for continuing to be an awkward
fuckup into 2013 and beyond!

Allright, I can't 'var instance' so maybe 'instance = null'?  Hmm, I
can't tell if it's using the same 'instance' inside beforeEach and it,
though.  How do I compile coffeescript to see the js output again...

coffee -p test/location_test.coffee

Well, I'm getting a 'var instance' okay.  BTW, I'm looking at
https://github.com/visionmedia/express/blob/master/test/Router.js
for inspiration.

Allright, I get a test failure because x and y are undefined.  I
should actually write location.coffee now.

And .. hey, wow, this actually worked.  Cool!  Yay!  Glug

========= 2013-01-01 ========= Okay, now for Cell ========== 11:41:51 ==========

How's this look?

Cell = require '../lib/cell'

describe 'Cell', ->
  it 'should fail to construct without a Location'
  it 'should construct with a Location'
  describe '(unwired)', ->
    it 'should not be valid'
    it 'should wire with four arguments'
  describe '(wired)', ->
    it 'should be valid'
    it 'should take them in NEWS order'
    it 'should return its neighbors'
  describe '(border)', ->
    it 'should accept null for a neighbor'
    it 'should return an invalid cell for a null neighbor'

Looks good.  Okay, and it's working, although I don't understand how
to do class constants in coffeescript, but hiding the constant
(INVALID) is probably better anyhow.

=========== 2013-01-01 =========== well okay ============ 12:09:07 =============

Looking at my CRC it looks like I left Piece out of Cell.  Who is
responsible for
* keeping track of what pieces are where? Cell
* validating moves? Board
* capturing pieces out of play? Game

How should I get from a Piece to its Cell so I can validate moves?
Well, Board validates moves, it has the Cells, so that's okay.

Oop, INVALID should be chainable as well, let's add a test for that.

Allright, let's add piece.

============ 2013-01-01 ============= now ============== 12:22:56 ==============

Piece.  It should have a Location (nullable when out of play?) and
should generate moves from a Cell.

Ugh, I gotta update scruffy-jump to work on node projects instead of
rails projects.  Maybe make scruffy-jump-matchers a project variable.

Also, I just remembered I have to handle promotion, which is going to
add more classes.  I need a TODO list.  But I don't want to yakshave
right now ;( I'll look into org-mode todo shit when I run out of
brain.

Interesting: a queen can't move through another piece.  But in RTC, if
you start the move, what happens if it becomes invalid partway through
the move?  I guess it should still be valid.  But then what happens if
I move two pieces of the same color onto the same cell, can you
capture your own piece?  WHY NOT!!!!  cool bro

I also want to add a test watcher that does a cls() and reruns the
test when you update test/* or lib/*.

Bleh, stuck at 'moves'.  I should implement these before Piece.

============ 2013-01-03 ============= hmm ============== 09:10:56 ==============

I'm getting 'ReferenceError: Move is not defined'.  ah, I see, not in
the test, in piece.coffee.

Well, okay, cool, now Pieces work.  But I'm getting the feeling I'm
building this a little too bottom-up.

============ 2013-01-07 ============= okay ============= 08:38:40 ==============

I'm here to agree with myself that I'm building this too bottom-up,
and that TDD, while it's probably a super cool thing whne you're
practiced in it, is not my style and I'm having a hard time getting
velocity.  Part of this is because my class design skills are also not
super hot (I guess?), I usually don't make a big chart ahead of time
saying this hooks to that and nothing else, I just start threading
functionality through stuff.  So I think I have a legit skeleton right
now and I can start building stuff with it, and I'll just have to try
to be grownup and pay attention when something is becoming malignant
and then try to break it up.

I made a little observer class because I -do- want the game objects to
not have to know about the Display* objects at all, so that's nice.

So, let's consult the CRC and get to the point where we can have
pieces moving around on the board and stuff.

============ 2013-01-14 ============= lame ============= 09:12:24 ==============

A week wasted later... okay, where was I again?

Okay let's at least make all the pieces and generate their moves.

=========== 2013-01-14 ============ not bad ============= 09:50:21 =============

I've encoded all the moves, now I should write tests for them.

============ 2013-01-14 ============ or not ============= 11:48:37 =============

I'll figure out whether the moves work easier if I get some visual
feedback.  Now I need to figure out how to get this stuff all running
in an html page.

Looking at
http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/

Ugh.

Ooh, waitaminute:
https://github.com/substack/node-browserify

Okay, using browserify, I've got -something-, let's see if it works.

Well, it doesn't really, I need to export shit to get it to work, or
write stuff in entry.js.  Let's checkpoint though.

Okay actually I got it working, nice!  I forgot how to use the script
tag because I'm a javascript professional.  Now to work on display
stuff.

============ 2013-01-17 ============ pieces ============= 09:48:25 =============

Using unicode chara from
http://en.wikipedia.org/wiki/Chess_symbols_in_Unicode

Actually, using their images, because the alpha is no good

allright, they drawin!

============ 2013-01-18 ============ yikes ============= 09:27:14 ==============

Ugh actually I've been falling behind on tests, and I just wrote one
that caught a bug, so I gotta do that up.  Plus, I want to have the
layout object specify the board dimension so that we could do
different size boards.

============ 2013-01-18 ============= wow ============== 15:44:42 ==============

Okay, good progress.  Got a lot of tests in and I actually have player
input, movement, capturing, etc.

Couple movement rules I forgot:
* pawns can move 2 squares to start
* castling (i don't even know how it works)

OK, got the pawn one.

=========== 2013-01-22 ============ hokidoki ============ 09:05:03 =============

Last things I really need are cooldowns and victory conditions and
then I can start breaking everything apart for the network
implementation.

============ 2013-01-22 ============= okay ============= 09:55:49 ==============

So I have cooldown and victory condition.  I'm not perfectly happy
with the way the cooldown is implemented because it's mutation-heavy,
but it works.  I think what I want to do is now pull all of the state
out the pieces and the board, so that the pieces are essentially just
maps of functions for generating moves given cells.  Then the state
map is basically a structure that looks like the initial layout plus
(cooldown || move information) and a link to the previous state.

Though, actually, this would get complex, having variant data
structures using array locations... I should refactor layouts to use
objects, instead.

============ 2013-01-23 ============ state ============= 08:45:04 ==============

outside of the state in Game, we have:
Cell.piece
Piece.location
Piece.in_initial_location
Piece.cooldown

Hmm, okay, can we invert the dependency so a Piece points to its Cell
rather than the other way around?

* Board.cell_of(piece) should become piece.cell (but check in_play)
move_to is weird now
valid_destination needs to know about game

yikes, this is a large excursion.

Let's, instead, just do the simplest thing possible.  Give game a
create_state function, a restore_from_state function, and a vector of
states.

========== 2013-01-28 ========== happy birthday =========== 10:02:11 ===========

Okay, so what was the state in game again?  @board and @pieces are
covered.  @essential_pieces is invariant.  @victor is actually
something we care about, because we might 'win' on one side of the
wire and then discover that the other player moved the king at the
last moment.  @queued_moves is ephemeral.  So:

@victor, @active_moves, @current_tick
that's it.

Okay, so now we have a move queue... let's order it and get that out
of the way.

Nice, I have restore... but no tests.  Okay, this definitely requires
a test.

Good that I wrote one because I have a lot of bugs!!! Also, @TODO:
cooldown isn't serializing correctly.  Another @TODO: run the tests as
a pre-commit hook in git, I have to figure out why mocha is returning
0 if there are failures but after that it should work.

Allright, got it working, but I'm unhappy with my liberal use of
_.clone.  that's another @TODO.  I probably want a serialization
protocol that handles nulls correctly.

========== 2013-01-28 =========== network time =========== 11:26:03 ============

So at this point, I think it's time to fill out Player, but its design
is going to depend a bit on Socket.IO, so I'll do a little digging
there first.

============ 2013-01-29 ============= neat ============= 09:38:45 ==============

Well, I have something that kinda works, but the ticks don't match up
because each side starts their own game.  So if black connects 3
seconds after white, and white moves, black won't see white move until
3 seconds later.  On connect we really need to serialize the current
state of the game... does that include the history?  Ugh, it might.
If it starts choking, I'll have to turn the history into a ring
buffer, or work on history compression.

======== 2013-01-29 ======== flattening game state ========= 10:20:17 ==========

cells is already flattened, yay!
active_moves needs to be flattened
Piece.create_state... yeah, that too

ok, working on active_moves.

Ugh, running into some weird bug with either mocha or chai.  There are
a few tests in game_test.coffee that, when they fail, end up
suppressing error messages for other test failures.  The tests still
fail, luckily, but I don't get any output about what assertions
failed.

*** YAK SHAVING WARNING ***

I don't know enough about js to dig into chai.  I'll just fix the test failures and note that if I get that behavior in the future, it's likely something wrong with
      instance.move_history[0].should.deep.equal [[0, 7]]

============ 2013-01-29 ============= woot ============= 11:32:33 ==============

Now we're talking!

a couple of @TODOs:

* history compression for a couple of reasons.  serializing state
  shouldn't involve sending floats around.
* reconnection
* shift()ing sides is fragile
* authenticate moves

Ok, semi-working move authentication!  Hooray!
Some bug fixes.. eugh..

Will says:
* it shouldn't register as a win until the window has elapsed
Justin says:
* if you have a JUST FRAME dodge then you should get like a cooldown speed bonus on that piece

and SHITTONS OF PARTICLE EFFECTS

============ 2013-01-30 ============= also ============= 09:58:28 ==============

Some infrastructure that would let me set up games and stuff would be
cool.  But then I would need persistent backend storage.  I could use
sqlite!  Or ... redis?  Or Mongo, since this is Node?  Thanks
hipsters!  I am choice paralyzed.

Sqlite for now feels good because then I can swap in postgres or w/e
later.  SCHEMA TIME

========== 2013-01-30 =========== b-b-but wait =========== 10:02:54 ============

I have a backlog of issues!  I should have an issue tracker!  :(
Should I use github's?

Jeez, I'm really grateful I have this project.  There are so many
things I want to play with and I've never had a good reason to use
them before.

I also want a 'ready' button with a '3..2..1..EXPLOSIONS' countdown.
So, yeah, time to start keeping track of issues.  I'll start with an
org-mode doc in the repo for now.

============ 2013-01-31 ============= nsh ============== 10:12:15 ==============

I basically want a bash function (so that export works) that ascends
to parent directories until it finds package.json, then exports
$that/node_modules/.bin to the front of path.  I have dirname and
basename available.

Hmm, I can cheat by using git rev-parse --show-toplevel.

nsh () { export PATH=$(git rev-parse --show-toplevel)/node_modules/.bin:$PATH ; }

I'll just add that to my .profile.

============ 2013-02-02 ============ mongo ============= 08:23:12 ==============

why not, eh?

ok, getting the 32-bit version of 2.2.3

============ 2013-02-06 ============ glark ============= 08:41:13 ==============

ok, I need to work out how to communicate between a site (probably
written in node?) and a game server.  then later on i can work out how
to have the site decide when to spin up servers.

=========== 2013-02-07 =========== YES TODAY ============ 10:01:37 =============

jeez.

so i can have a little site in node (a single one for now, with
in-memory tracking of what games are going on, and then i can move
that to redis or a queue system later) and when a game is desired, it
will call allocateGame.  In the future this can query a pool of aws
instances for capacity; in the now it can spin up a game server on
localhost (using system.exec) and a pipe to communicate to it.
Instead of using nginx for now, I can spin up the game server on a
separate port. Since we'll probably want to be able to run multiple
games per box in aws-land, games (and their socket.io endpoints) will
be namespaced with a game guid (perhaps the mongo $oid?)

OK, so the biggest unknown here is mongo-in-general, and then
communicating with processes over pipes.

Hmm, this actually seems kinda shit.  The site process shouldn't start
the game server process; it should expect it to be started (and then I
can restart/monitor it externally) and communicate with it across
another channel.  This way ops can manually spin up/down additional
servers, or we could have a service allocate them on request.  Using
pipes to communicate between the processes is not the best idea
because it'll fall apart as soon as they're run on different machines.

Well, I could use redis pub/sub for this?  Or just poll mongo... for
simplicity, polling mongo seems like the reasonable thing to do, for
now.

So the site does

  game_id = guid()
  game_state = {game_id: game_id, state: 'new'}
  db.games.save(game_state)
  do {
    sleep(100);
    game_state = db.games.find({game_id: game_id})
  } while (game_state.endpoint == null)

  send_user_templated_page('client.html', {endpoint: game_state.endpoint})

and the game server does

  setInterval ->
    queued_games = db.games.find state: 'new'
    for queued_game in queued_games
      queued_game.state = 'playing'
      queued_game.endpoint = guid()
      new Game(endpoint: queued_game.endpoint)
      db.games.update {game_id: queued_game.game_id}, queued_game
  , 100

ok, not too bad.  I'll get mongo running and start making this.

============ 2013-02-08 ============ mongo ============= 10:19:15 ==============

so i need two things in the database: users and games.  and to create
users i need to set cookies.  let's make users first.  so, let's make
cookies first!

Yikes, ID generation is a problem.  I can't do User.new() and get
something back with the ID in it.

Ah, but I can ObjectId() and then create off that.

OK, cool.  I'm actually creating users on requests and putting them
into mongo.  Neat/cool/yay!  Unfortunately, the user_middleware isn't
invoked when express.static is invoked, which is kinda shit ... ish.
I remember at OpenFeint how trying to assign a user on every request
caused problems.  So maybe for now, we won't create a user until
req.user() is called, or just have the reaper process that cleans up
users who haven't done anything after a half hour.

Oh, I was setting up the middleware in the wrong order.  Fixed now.

=========== 2013-02-08 ============ so, cool ============ 11:37:26 =============

next steps:

* namespace api stuff under api?
* make app angular
* let the user edit stuff about themselves
* this mythical cron job that reaps dead users (not so much 'next')
* add games to db
* actually link to games
* play/spectate games

=========== 2013-02-08 =========== well well ============ 15:53:34 =============

okay, i'm starting to get the feel of this, but it needs a little more
glue.  the current create-a-game method is awful.  Seq helps a lot but
not enough.

======== 2013-02-10 ======== Some refactoring later ========= 08:35:22 =========

I need to work on tests.  This is way too easily broken.  But... argh,
I'm so close to having something working.

========== 2013-02-14 =========== tests today? =========== 09:11:03 ============

let's see.

Well, actually, I've made really good progress on tests!
Unfortunately I'm stuck at a bit of a weirdness with seq.  Minimal case is:

Seq()
  .par_((next) -> next("An Error"))
  .par_((next) -> next("Another Error"))
  .seq_((next, a, b) -> next(null, a + b))
  .catch((err) -> do_something_with(err))

do_something_with gets called twice.  Which, to be fair, makes sense,
but I'd really like to pass errors once-and-only-once.

Well, I can null out next with the first error.  That seems kinda
wrong though.

Ok, mocha --watch also eats up a lot of mongo connections... phew, fixed.

============ 2013-02-16 ============= okay ============= 14:56:28 ==============

two things i learned today:

* cors kinda sucks.  chrome at least will always hit the host on the
  default port to do its OPTIONS request

* i need to factor out some stuff so that i can have restful routes
  for my models and that shouldn't be too hard.

====== 2013-02-18 ======= halfway through refactoring ======== 13:23:07 ========

Having trouble testing promises.  I want to do this:

      Game.pmake(alice.id, alice.id).
        then((game) -> throw new Error "Succeeded unexpectedly").
        fail((err) -> err.message.should.be "Don't play with yourself").
        finally(-> done())

But unfortunately the 'should' in the fail block gets caught by Q, so
it's not registered as an assertion failure.

I tried using mocha-as-promised but simply including it caused a test
to fail (it calls done() multiple times) where it had previously
succeeded.  Gonna check back on that when I get back from this walk.

======== 2013-02-18 ========= ok promises working ========== 16:10:09 ==========

jeez i've punted stuff for long enough.  Time to get an actual site
working.  Back to angular.

============ 2013-02-20 ============= okay ============= 17:10:34 ==============

cool i have -something- working.  now i gotta actually vaguely think
out the site.

so something like this

title!!!!!!!!!!     user
------------------------
new's    bro's    game's   (tabs)



news looks like:

shit dog guess what i'm a webiste
2013-02-20 18:33:39 by ben

bros looks like:

find bro by email:  _______________
online bros:
* Fred
* Daphne
offline bros:
* Shaggy (last seen 1922)

if you click on a bro it takes you to their profile
profile looks like

(user.avatar)
user.name
online | last seen $date
ELO score: 1687
Add|Remove Bro
[if bro]
  Challenge/Accept Challenge/Resume Game

games looks like:
Active Games                  | Game History
Fred challenges u             | vs. Daphne (green for victory, red for defeat), July 92nd
vs. Shaggy (started Nov 42nd) |

clicking on a challenge allows you to accept or reject
clicking on a game in history goes to watch a replay
clicking on an active game opens it up

=========== 2013-02-21 =========== holy carp ============ 08:39:28 =============

I should have been doing the whole thing in Meteor all along.

for later: https://github.com/dannycoates/node-inspector

where i'm stuck: i want to test where someone's online, which is
u.profile.online, but queries seem to only let me compare the entirety
of profile.  not sure i dig mongo.  (or, my schema.  but w/e.)

NO I'M DUMB, MONGO IS GREAT
db.users.findOne({"profile.online": true})

============= 2013-02-23 ============= ok ============== 18:55:53 ==============

well, i can't findAndModify, so this is kinda shit, but I can work on
that later.  Now I actually gotta figure out how to get the game into
the server.  fffff

========= 2013-02-24 ========== how do i do that ========== 07:53:18 ===========

in this case i'm starting to wonder if i should port the game to
meteor, since the reason for separating stuff out to begin with was
for ops/perf reasons, and ops/perf of meteor is already ... eh
... ????  maybe i'm presuming too much there.

But forcing me to learn how to get services to interoperate is
actually i think good for me.

so what i'd like is to have them communicate, maybe through mongo
since it already exists, as to what games are scheduled.

user tries to enter a game by clicking on a link
server is like hmm, ok, you want game G, eh?  lemme spin that up for you.
it finds a free slot S:

  c = MongoClient.collection('game-slots')
  slot = c.find({game: game_id})
  slot |= c.findAndModify({free: true}, {free: false, game: game_id})
  return res.send(500, "no free slots") unless slot?
  res.redirect(slot.url + "?color=" this_players_color)

meanwhile, the game process has provided these slots by inserting them
at startup with free:true, it should hopefully remove them at shutdown
and also maybe we have a cron job for cleaning them up.  have the game
provide a /checkup route under url that just 200s if it's still
running.

allright!  so, after all this time... I gotta do work on the game
server!

============ 2013-02-24 ============ woohoo ============= 08:06:52 =============

* how do players authenticate themselves.

slot =
  free: false
  url: 'http://18.244.0.19:3000/a0ehr0923h4uh'
  game_id: '09a8ys0b870dafo1'
  black_token: '08a0v987a0s9v8'
  white_token: '1kbl5mnb51n253'

? seems legit.  sure, why not.

slot states:
preparing (game server is setting up)
open (games can be assigned to this slot)
assigned (a game has been assigned)
waiting (game server has allocated a game, waiting for players to connect)
playing (game is in progress or finishing)

this is hard.  i should use better abstractions.
i'm hand-interleaving talking to the database when i should be using pub/sub.
that's ghetto and error-prone.  also i have a bunch of switches on state
which is clampy, i should dispatch socket messages to a state object.
also, multiple db promises in flight is asking for sync bugs.  i should queue them
at the GameServer level.
